@page "/customers";
@using Client.Infrastructure.Managers.Customers;
@using ErpDashboard.Application.Features.Customer.Command.AddEdit
@using ErpDashboard.Application.Features.Customer.GetAllCustomers;
@inject ICustomersManager _CustomerManager;

<style>
	th {
		color: mediumvioletred !important;
		font-weight: bold !important;
	}
	hr {
  border: 1px solid #F5F5F5;
  margin-bottom:-17px;
}
</style>

@*<MudAppBar Style="position:sticky;top:64px;background-color:white!important" Color="Color.Transparent" Fixed="false" Class="mb-4">
</MudAppBar>*@
<MudCard Style="border-radius:7px">
	<MudCardHeader>
		<HeroTitle  Title=Customers></HeroTitle>
		<MudIconButton  Variant="Variant.Filled" Style="margin-left:30px; background-color:#025CD8 ;border-radius:7px;color:white;width:120px;height:38px" OnClick="(() => InvokeModal(0))">Add New</MudIconButton>
		<MudSpacer></MudSpacer>
		<MudSpacer></MudSpacer>
		<MudSpacer></MudSpacer>
		<MudSpacer></MudSpacer>
		<MudSpacer></MudSpacer>
		<MudTextField Style="height:40px" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info" IconSize="Size.Medium" Class="mt-0" Variant="Variant.Outlined"></MudTextField>
		
	</MudCardHeader>
	<MudCardContent>
		<hr  />
		<MudTable Style=" border-color:#F5F5F5;outline:none" Bordered="true" Items="@Customers" @ref="_table" Hover="true" Breakpoint="Breakpoint.Sm" ServerData="@(new Func<TableState, Task<TableData<GetAllCustomerViewModal>>>(ServerReload))" Loading=@_Loading LoadingProgressColor=Color.Success Dense=true Class="mt-4">
			<ColGroup>
				<col />
				<col style="width: 1px;" />
				<col />
				<col />
				<col />
				<col />
				<col />
				<col />
				<col />
			</ColGroup>
			<HeaderContent>
				<MudTh Style="color:red">Avatar</MudTh>
				<MudTh Style="color:red" Class="mySize"><MudTableSortLabel T="GetAllCustomerViewModal" SortLabel="Id">ID</MudTableSortLabel></MudTh>
				<MudTh><MudTableSortLabel T="GetAllCustomerViewModal" SortLabel="CustomerName">Name</MudTableSortLabel></MudTh>
				<MudTh> Phones</MudTh>
				<MudTh> Adress</MudTh>
				<MudTh>Category</MudTh>
				<MudTh>Reg date</MudTh>
				<MudTh>Status</MudTh>
				<MudTh>Actions</MudTh>
			</HeaderContent>

			<RowTemplate>
				<MudTd><MudAvatar Color="Color.Tertiary">@context.CustomerName.Substring(0,1)</MudAvatar></MudTd>
				<MudTd Class="mySize" DataLabel="Nr">@context.CustomerId</MudTd>
				<MudTd DataLabel="Sign">@context.CustomerName</MudTd>
				<MudTd DataLabel="Name">@context.CustomerPhone</MudTd>
				<MudTd DataLabel="Name">@context.Adress</MudTd>
				<MudTd DataLabel="Name">@context.Category</MudTd>
				<MudTd DataLabel="Name">@context.RegDate</MudTd>

				<MudTd>
					<MudSwitch @bind-Checked=@context.Status ReadOnly="true" Color="Color.Tertiary" />
				</MudTd>

				<MudTd>
					<MudButton StartIcon="@Icons.Material.Filled.Edit" Style="background-color:#025CD8;border-radius:5px;color:white;width:10px" Variant="Variant.Filled" OnClick="(() => InvokeModal(context.id))"></MudButton>
					<MudButton StartIcon="@Icons.Material.Filled.Delete" Style="background-color:#F95374;border-radius:5px;color:white;width:20px" Variant="Variant.Filled" OnClick="(()=>Delete(context.id))"></MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<TablePager />
			</PagerContent>
		</MudTable>

	</MudCardContent>
</MudCard>

@code {
	private IEnumerable<GetAllCustomerViewModal> Customers;
	private GetAllCustomerViewModal _customer;
	private MudTable<GetAllCustomerViewModal> _table;
	string _searchString = "";
	private bool _Loading;
	int SelectedCategory;
	private int _totalItems;
	private int _currentPage;
	protected override async Task OnInitializedAsync()
	{

	}

	private async Task<TableData<GetAllCustomerViewModal>> ServerReload(TableState state)
	{
		if (!string.IsNullOrWhiteSpace(_searchString))
		{
			state.Page = 0;
		}
		await Getdata(state.Page, state.PageSize, state);
		return new TableData<GetAllCustomerViewModal> { TotalItems = _totalItems, Items = Customers };
	}
	private async Task Getdata(int pageNumber, int pageSize, TableState state)
	{
		string[] orderings = null;
		if (!string.IsNullOrEmpty(state.SortLabel))
		{
			orderings = state.SortDirection != SortDirection.None ? new[] { $"{state.SortLabel} {state.SortDirection}" } : new[] { $"{state.SortLabel}" };
		}
		if (orderings == null)
		{
			orderings = new string[1];
			orderings[0] = "ID";
		}
		var Request = new GetAllCustomersQuery() { PageSize = pageSize, PageNumber = pageNumber + 1, SearchString = _searchString, OrderBy = orderings };
		var response = await _CustomerManager.GetAllAsync(Request);
		if (response.Succeeded)
		{
			_totalItems = response.TotalCount;
			_currentPage = response.CurrentPage;
			Customers = response.Data;
		}
		else
		{
			foreach (var msg in response.Messages)
			{
				_snackBar.Add(msg, Severity.Error);
			}

		}
	}
	private void OnSearch(string text)
	{
		_searchString = text;
		_table.ReloadServerData();
	}
	private async Task InvokeModal(int id = 0)
	{
		var parameters = new DialogParameters();
		if (id != 0)
		{
			_customer = Customers.FirstOrDefault(c => c.id == id);
			if (_customer != null)
			{
				parameters.Add(nameof(AddEditCustomerPage.Model), new AddEditCustomerCommand
					{
						Id = _customer.id,
						CustomerId = _customer.CustomerId,
						CustomerName = _customer.CustomerName,
						Email = _customer.Email,
						CustomerType = _customer.CustomerType,
						RegType = _customer.RegType,
						Weight = _customer.Weight,
						Height = _customer.Height,
						Status = _customer.Status,
						Notes = _customer.Notes,
						CategoryId = _customer.CategoryId,
						BirthDate = _customer.BirthDate,
						customerAdresses = _customer.customerAdresses,
						customerPhons = _customer.customerPhons
					});
			}
		}
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true, DisableBackdropClick = true };
		var dialog = _dialogService.Show<AddEditCustomerPage>(id == 0 ? "Create" : "Edit", parameters, options);
		var result = await dialog.Result;

		Reset();

	}
	private void Reset()
	{

		OnSearch("");
	}
	private async Task Delete(int id)
	{
		string deleteContent = "You Are Going To Delete the Plan Days";
		var parameters = new DialogParameters
			{
				{nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
			};
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
		var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Delete", parameters, options);
		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			var response = await _CustomerManager.DeleteAsync(id);
			if (response.Succeeded)
			{
				_snackBar.Add(response.Messages[0], Severity.Success);
				Reset();
			}
			else
			{
				foreach (var message in response.Messages)
				{
					_snackBar.Add(message, Severity.Error);
				}
			}
		}
	}

}
