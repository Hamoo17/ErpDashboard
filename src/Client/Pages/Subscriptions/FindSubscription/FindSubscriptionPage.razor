@page "/Subscription"
@using ErpDashboard.Application.Features.Subscriptions.Queries.Dto
@using ErpDashboard.Client.Infrastructure.Managers.Subscriptions
@using FluentValidation
@using ErpDashboard.Application.Features.Subscriptions.Queries.GetSidByPhone
<HeroTitle Title="Subscription Manager" Description="Search For Subscription And Manage it."></HeroTitle>




<MudGrid Class="d-flex justify-center flex-grow-1 gap-4 pr-2 pl-2" Elevation="0"> 
    <MudItem md="3" sm="6" xs="12">
       <MudForm Model="Model" @ref="form" @onsubmit="Submit" >
       <MudTextField HelperTextOnFocus="true" T="string" OnAdornmentClick="Submit"  @onfocusout="ResetValidation" OnClearButtonClick="ResetValidation" 
            Adornment="Adornment.End" @bind-Value="Model.PhoneNumber" Validation="PhoneValidator.Validation" AdornmentIcon="@Icons.Filled.Search" 
            Clearable="true" Immediate="true" OnKeyDown="OnKeyDownPhone" Label="Phone" MaxLength="10" Variant="Variant.Outlined" 
            HelperText="Search By Phone Number ex. 050XXXXXXX" >
        </MudTextField>
       </MudForm>
    </MudItem>
    <MudItem md="3" xs="12" sm="6" >
        <MudForm   @ref="form2" >
       <MudTextField HelperTextOnFocus="true" T="int?" Value="null"
            Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" 
            Clearable="true"   Label="SID" MaxLength="10" Variant="Variant.Outlined" 
            HelperText="Search By Subscription Id ex. XXX" >
        </MudTextField>
       </MudForm>
    </MudItem>
</MudGrid>

@code {
    [Inject] public ISubscriptionManager _subscriptionManager { get; set; }
    GetSidByPhoneQury Model = new();
    CustomerInfoDto CustomerInfo = new();
    MudForm form;
    MudForm form2;
    EditForm edform;
    private async Task OnKeyDownPhone(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }
    void ResetValidation()
    {

        if (string.IsNullOrEmpty(Model.PhoneNumber) || string.IsNullOrWhiteSpace(Model.PhoneNumber))
        {
            form.ResetValidation();
        }
       
    }
    private async Task Submit()
    {

        await form.Validate();

        if (form.IsValid && !string.IsNullOrEmpty(Model.PhoneNumber) && !string.IsNullOrWhiteSpace(Model.PhoneNumber))
        {
           await SerchByPhone();
        }
    }
    private async Task SerchByPhone()
    {
        var Response = await _subscriptionManager.GetSidByPhone(Model.PhoneNumber);
        if (Response.Succeeded)
        {
            CustomerInfo = Response.Data;
        }else
        {
            CustomerInfo = new();
        }
    }
    FluentValueValidator<string> PhoneValidator = new FluentValueValidator<string>(x => x.Matches("^\\d{10}$").WithMessage("Provide a True Phone Number").Length(10).WithMessage("Number Must be 10 Digits"));
}
