@page "/Units"
@using ErpDashboard.Client.Infrastructure.Managers.Units
@using ErpDashboard.Application.Features.Units.Queries.Dto
@using ErpDashboard.Application.Features.Units.Commands.AddEdit
@inject IUnitsManager _UnitManager

<MudAppBar Color="Color.Transparent" Fixed="false" >
	<HeroTitle Title="Units"/>
	  <MudSpacer />
	<MudIconButton Icon=@Icons.Filled.AddBox Color=Color.Inherit Edge="Edge.Start" OnClick="(()=>InvokeModal())"/>
</MudAppBar>
@if (UnitResponses != null)
{
	<MudTable Items="@UnitResponses" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Default Qty</MudTh>
        <MudSpacer/>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Sign">@context.EnName</MudTd>
        <MudTd DataLabel="Name">@context.DefQty</MudTd>
		<MudSpacer/>
		<MudTd>		
			<MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Tertiary" OnClick="(()=>InvokeModal(context.Id))"></MudIconButton>
			<MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick = "(()=>Delete(context.Id))"></MudIconButton>
		</MudTd>

   </RowTemplate>
	</MudTable>
}else
{
	<h1>Loading...</h1>
}


@code {

    public  List<UnitResponse> UnitResponses { get; set; }
    public UnitResponse UnitResponse = new();

    protected override async void OnInitialized()
    {
        await GetUnitsData();
    }
    private async Task GetUnitsData()
    {
        var Response = await _UnitManager.GetAllAsync();
        if (Response.Succeeded)
        {
            UnitResponses = Response.Data;
            StateHasChanged();
        }
        else
        {
            foreach(var msg in Response.Messages)
            {
                _snackBar.Add(msg, Severity.Error);
            }
        }
    }
    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            UnitResponse = UnitResponses.FirstOrDefault(c => c.Id == id);
            if (UnitResponse != null)
            {
                parameters.Add(nameof(AddEditUnitsModal.Model), new AddEditUnitsCommand
					{
						Id = UnitResponse.Id,
						EnName = UnitResponse.EnName,
						DefQty = UnitResponse.DefQty,

					});
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditUnitsModal>(id == 0 ? "Create" : "Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }

    }
    private async Task Delete(int id)
    {
        string deleteContent = "You Are Going To Delete the Units";
        var parameters = new DialogParameters
            {
                {nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _UnitManager.DeleteAsync(id);
            if (response.Succeeded)
            {
                await Reset();
                _snackBar.Add(response.Messages[0], Severity.Success);
            }
            else
            {
                await Reset();
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }
    private async Task Reset()
    {
        UnitResponse = new UnitResponse();
        await GetUnitsData();
    }
}
