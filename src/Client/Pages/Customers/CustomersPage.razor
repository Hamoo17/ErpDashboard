@page "/customers";
@using Client.Infrastructure.Managers.Customers;
@using ErpDashboard.Application.Features.Customer.Command.AddEdit
@using ErpDashboard.Application.Features.Customer.GetAllCustomers;
@inject ICustomersManager _CustomerManager;


<style>
	.mySize th{
	width:1px;
	}
	
</style>
<MudAppBar Color="Color.Transparent" Fixed="false" Class="mb-4">
	<MudIcon Size=Size.Large  Color=Color.Tertiary Class="mr-4" Icon="@Icons.Material.Filled.AccountCircle" ></MudIcon>
	<HeroTitle  Title=Customers ></HeroTitle>
	<MudSpacer></MudSpacer>
	<h1>@SelectedCategory.ToString()</h1>
	<MudFab StartIcon="@Icons.Filled.Add" Label="Add New Customer" Color=Color.Success/>
	</MudAppBar>
	<ErpDashboard.Client.Pages.PlanCategory.Compnents.PlanCategoryComboBoxCombonent @bind-Myvalue = "SelectedCategory">

	</ErpDashboard.Client.Pages.PlanCategory.Compnents.PlanCategoryComboBoxCombonent>
@if (Customers != null)
{
	<MudTable Items="@Customers" Hover="true" Breakpoint="Breakpoint.Sm" Loading=@_Loading  LoadingProgressColor=Color.Success Dense=true Class="mt-4">
		<HeaderContent>
			<MudTh>Avatar</MudTh>
			<MudTh Class="mySize">ID</MudTh>
			<MudTh>Name</MudTh>
			<MudTh> Phones</MudTh>
			<MudTh> Adress</MudTh>
			<MudTh>Category</MudTh>
			<MudTh>Reg date</MudTh>
			<MudTh>Status</MudTh>
			<MudTh>Actions</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd><MudAvatar Color="Color.Tertiary">@context.CustomerName.Substring(0,1)</MudAvatar></MudTd>
			<MudTd Class="mySize" DataLabel="Nr">@context.CustomerId</MudTd>
			<MudTd DataLabel="Sign">@context.CustomerName</MudTd>
			<MudTd DataLabel="Name">@context.CustomerPhone</MudTd>
			<MudTd DataLabel="Name">@context.Adress</MudTd>
			<MudTd DataLabel="Name">@context.Category</MudTd>
			<MudTd DataLabel="Name">@context.RegDate</MudTd>

			<MudTd>
				<MudSwitch @bind-Checked=@context.Status Color="Color.Tertiary" />
			</MudTd>

			<MudTd>
				<MudButton Variant="Variant.Filled"  Color="Color.Info"OnClick="(() => InvokeModal(context.id))">Edit </MudButton>
				<MudButton Variant=Variant.Filled Color=Color.Error>Delete</MudButton>
			</MudTd>
		</RowTemplate>
	</MudTable>
}
else
{
	<h1>Loading...</h1>
}
@code {
	private List<GetAllCustomerViewModal> Customers;
	private GetAllCustomerViewModal _customer;
	private bool _Loading;
	int SelectedCategory;
	protected override async Task OnInitializedAsync()
	{
		_Loading = true;
		await Getdata();
		_Loading = false;
	}


	private async Task Getdata()
	{
		var response = await _CustomerManager.GetAllAsync();
		if (response.Succeeded)
		{
			Customers = response.Data;
		}
		else
		{
			foreach (var msg in response.Messages)
			{
				_snackBar.Add(msg, Severity.Error);
			}

		}
	}
	private async Task InvokeModal(int id = 0)
	{
		var parameters = new DialogParameters();
		if (id != 0)
		{
			_customer = Customers.FirstOrDefault(c => c.id == id);
			if (_customer != null)
			{
				parameters.Add(nameof(AddEditCustomerPage.Model), new AddEditCustomerCommand
                    {
                        Id = _customer.id,
						CustomerId=_customer.CustomerId,
                        CustomerName = _customer.CustomerName,
                        Email = _customer.Email
                    });
			}
		}
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true, DisableBackdropClick = true };
		var dialog = _dialogService.Show<AddEditCustomerPage>(id == 0 ? "Create" : "Edit", parameters, options);
		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			await Reset();
		}
	}
	private async Task Reset()
	{
		Customers = new List<GetAllCustomerViewModal>();
		await Getdata();
    }

}
